<!DOCTYPE html>
<html ng-app="JobQueueApp">
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE-edge,chrome=1">
    <title>Angular Sails Example</title>
    <meta name="viewport" content="width=device-width">
    <link rel="stylesheet" type="text/css" href="styles/css/main.css" />

    <!-- Default home page -->
</head>

<body ng-controller="JobQueueController" class="default-page">

<script type="text/ng-template" id="myModalContent.html">
    <div class="modal-header">
        <h3 class="modal-title">{{jobType}}</h3>
    </div>
    <div class="modal-body">
        <h1>{{searchParam}}&nbsp;&nbsp;<small>{{videoAmount}}&nbsp;videos</small></h1>
    </div>
    <div class="modal-footer">
        <button class="btn btn-warning" ng-click="cancel()">Cancel</button>
    </div>
</script>

<div class="container">
    <div class="header">
        <div class="page-header">
            <h1>YouTubeVideo Job Queue (homework)</h1>
        </div>
    </div>
    <div class="row">
        <div class="col-xs-8">
            <form class="form-inline">
                <div class="form-group">
                    <div class="input-group">
                        <input  ng-model="searchParams" type="text" class="form-control"   id="srchParam"  maxlength="25" placeholder="enter artist name">
                    </div>
                </div>
                <button class="btn btn-primary" ng-click="fetchTopics()" ng-diabled="{{inProgress}}"> Fetch Videos</button>
            </form>
        </div>
        <div class="col-xs-4">
            <button ng-show="showPrevious" class="btn btn-warning" ng-click="showPreviousCatalog()">Previously Cataloged</button>
        </div>
        <div class='col-xs-12'>
            <h2 class="text-center text-primary">List Of Jobs</h2>
            <div class="well well-lg">
                <ul class="list-group">
                    <li ng-repeat="job in jobsList"class="list-group-item" ng-class="{'list-job-completed':job.completed, 'active':!job.completed }">
                        <div class="row lg-mrg">
                            <div class="col-xs-2"><label>Job Id</label></div>
                            <div class="col-xs-3"><input value="{{job.jobId}}" type="text" class="form-control" readonly></div>
                            <div class="col-xs-2"><label>Tube topics</label></div>
                            <div class="col-xs-5"><input value="{{job.ytTopic}}" type="text" class="form-control" readonly></div>
                        </div>
                        <div class="row lg-mrg">
                            <div class="col-xs-2"><label>Job State</label></div>
                            <div class="col-xs-3"><input value="{{job.jobState}}" type="text" class="form-control" readonly></div>
                            <div class="col-xs-4 col-xs-offset-3"><button class="btn btn-success btn-block" ng-click="updateJobState(job.jobId)">Job State</button></div>
                        </div>
                    </li>
                </ul>
            </div>
        </div>
    </div>
</div>



<!-- deps -->

<!--

  Client-side Javascript
  ========================

  You can always bring in JS files manually with `script` tags, or asynchronously
  on the client using a solution like AMD (RequireJS).  Or, if you like, you can
  take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

  By default, files in your `assets/js` folder are included here
  automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
  CoffeeScript (.coffee) are supported. In production, your scripts will be minified
  and concatenated into a single file.

  To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
  For example, here are a few things you could do:

      + Change the order of your scripts
      + Import scripts from other directories
      + Use a different preprocessor, like TypeScript

-->

    <!--SCRIPTS-->
    
    <!--SCRIPTS END-->
  </body>
</html>
